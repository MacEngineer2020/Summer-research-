close all
clear all
clc
% Constants
k1 = 20; k2 =50;
A1 = 1; A2 = 1; B1 = 1;B2 = 1;
G1 = 1; G2 = 1;
delta = 0.1;
% matrices to store data
raw_u1 = [];
raw_u2=[];
interpolate_u1=[];
interpolate_u2=[];
arr_u1=[];
arr_u2=[];
x1=[];
x2=[];
raw_x1=[];
raw_x2=[];
raw_time=[];
interpolate_x1=[];
interpolate_x2=[];
% indexes for matrices
row_num =1;
column_num=1;
column_num1=1;
%%%%
step_size=1;
%%%%%
row_num1=1;
row_num2=1;
sampled_time=[];
% running loop to generate dataset
 u1= 0;
  u2= 0;
  raw_time=[];
  raw_u1 = [];
  raw_u2=[];
  raw_x1=[];
  raw_x2=[];
  % solving ode from 0 to 10 with loop value
  e1 = u1/(k1+u1);
  e2 = u2/(k2+u2);
  alpha1 = (A1*e1)/(1+(B1*e1)+(B2*e2));
  alpha2 = (A2*e2)/(1+(B1*e1)+(B2*e2));
  % Parameters for solution
  f = @(t,x) [alpha1 - delta*x(1); alpha2 - delta*x(2)];
  [tv,xv]=ode45(f,[0 10],[0;0]);% solving the ode
  [row,col]=size(xv);
  row_num=1;
  %%%%
  
  %%%%%%
  for k=1:row
   % storing data for that particular run in an array
   raw_x1(row_num,1)=xv(k,1);
   raw_x2(row_num,1)=xv(k,2);
   raw_u1(row_num,1)=u1;
   raw_u2(row_num,1)=u2;
   raw_time(row_num,1)=tv(k,1);
   row_num=row_num+1;
  end
  row_num1=1;% reset the row number to 1 
  % solving ODE from 10 to 1000 with random values of u1 and u2 every
  % 10 timestamps
  for u3=10:10:990
   %counter=1;
   rng('shuffle');
   a = 1;
   b = 3*k1;
   a2=1;
   b2=3*k2;
   u1_new = (b-a).*rand(1,1) + a; %creating random u1 and u2 values
   u2_new=(b2-a2).*rand(1,1) + a2;
   e1 = u1_new/(k1+u1_new);
   e2 = u2_new/(k2+u2_new);
   alpha1 = (A1*e1)/(1+(B1*e1)+(B2*e2));
   alpha2 = (A2*e2)/(1+(B1*e1)+(B2*e2));
   % Parameters for solution
   f = @(t,x) [alpha1 - delta*x(1); alpha2 - delta*x(2)];
   [tv,xv]=ode45(f,[u3+0.0001 u3+10],[ raw_x1(row_num-1,1); raw_x2(row_num-1,1)]);% solving the ode for appropriate initial values 
   [row1,col]=size(xv);
   % storing solutions and timestamp for each run in a 1D array 
   for p=1:row1
    raw_x1(row_num,1)=xv(p,1);
    
    
    raw_x2(row_num,1)=xv(p,2);
    
    
    raw_u1(row_num,1)=u1_new;
    
    
    raw_u2(row_num,1)=u2_new;
    
    
    raw_time(row_num,1)=tv(p,1);
   
    
    row_num=row_num+1;
   end
   
  end
  
  xlswrite("raw_u1", raw_u1)
  xlswrite("raw_u2", raw_u2)
  xlswrite("raw_x1", raw_x1)
  xlswrite("raw_x2", raw_x2)
  xlswrite("raw_time1", raw_time)



  
  %resampling the data at every 10 intervals
  for cnt=1:step_size:1000
   % interpolating the data and storing it in another 1D array 
   interpolate_x1(row_num1,1)=interp1(raw_time(:,1),raw_x1(:,1),cnt);
   interpolate_x2(row_num1,1)=interp1(raw_time(:,1),raw_x2(:,1),cnt);
   interpolate_u1(row_num1,1)=interp1(raw_time(:,1),raw_u1(:,1),cnt);
   interpolate_u2(row_num1,1)=interp1(raw_time(:,1),raw_u2(:,1),cnt);
   sampled_time(row_num1,1)=cnt;
   row_num1=row_num1+1;
  end
  row_num2=1;
  for k=1:row_num1-1
   % 
   x1(row_num2,column_num1)=interpolate_x1(k,1);
   x2(row_num2,column_num1)=interpolate_x2(k,1);
   arr_u1(row_num2,column_num1)=interpolate_u1(k,1);
   arr_u2(row_num2,column_num1)=interpolate_u2(k,1);
   row_num2=row_num2+1;
  end
  
  column_num1=column_num1+1;
%  figure
% plot(sampled_time,x1(:,1),'r',sampled_time,x2(:,1),'g')
% grid on
% xlabel("Time")
% ylabel("Protein level")
% title("Proteins")
% legend("Protein 1", "Protein ")
% figure
% plot(raw_time,raw_x1(:,1),'r',raw_time,raw_x2(:,1),'g')
% grid on
% xlabel("Time")
% ylabel("Protein level")
% title("Proteins")
% legend ("raw Protein 1?, ?raw Protein 2")
% %hold off
% %Export data into excel file
% xlswrite("data_sampled_u1", arr_u1)
% xlswrite("data_sampled_u2", arr_u2)
% xlswrite("data_sampled_x1", x1)
% xlswrite("data_sampled_x2", x2)
% xlswrite("time_sampled",sampled_time)
