clc
clear all
close all
format long
out = csvread('learning_data_new.csv');%importing the data file 
 u= [out(:,1) out(:,2)]'; % matrix containing u1 and u2
 xo = out(:,3)'; %matrix containing x1
 time=out(:,4)'; % time stamps 

 [row_u,col_u]=size(u); %getting size of dtatset
 [row_xo,col_xo]=size(xo);
 
column_num=1;%keeps track of column index
 weighted_in =[];%matrix to store 5 u1 and u2 values from orignal dataset
 weighted_out=[];%stores corresponding value of x1
 
 simulate=[];% stores the value of u1 and u2 to be used in sim function
 column_num1=1% keeping track of column index
 sim_ans=[];% stores the simulated value of x1 generated by sim function
 
 num_of_elements=4;% how many elements we want to look back on 
 
 
 for i=1:col_u-num_of_elements-1 % outer loop 
     column_num=1;
     for j=i:i+4% inner loop
         %in this loop we generate our smaller datasets and feed them into
         %the rbe 
         
     weighted_in(1,column_num)=u(1,j);
         weighted_in(2,column_num)=u(2,j);
         weighted_out(1,column_num)=xo(1,j);
         column_num=column_num+1;
     end
     % feeding it into the rbe
     net=newrbe(weighted_in,weighted_out);
     
     % now we simulate the value of the timestep that is "next" and hasnt
     % been input into the net yet
         simulate=[u(1,i+5);u(2,i+5)];
         sim_ans(1,column_num1) = sim(net,simulate);% storing the simulated value
         sim_ans(2,column_num1)=time(1,column_num1);% storing the corresponding timestep
         column_num1 = column_num1+1;
 end
%  for i=num_of_elements:col_u-1
%          weighted_in(1,column_num)=u(1,i);
%          weighted_in(2,column_num)=u(2,i);
%          weighted_out(1,column_num)=xo(1,i);
%          
%         net=newrbe(weighted_in,weighted_out);
%          simulate(1,1)=u(1,column_num+1);
%          simulate(2,1)=u(2,column_num+1);
%          sim_ans(1,column_num) = sim(net,simulate);
%          column_num = column_num+1;
%  end 

%      new_time=[]
%    [row_time,col_time]=size(time);
%      column_num=1;
%      for i=1:col_time-1
%         new_time(1,column_num)=time(1,i);
%         column_num=column_num+1;
%      end

% random predict, fails to work
     p=[3.0785;124.5];
     y= sim(net,p)
     
     % plotting orignal data and simulated data
     figure
 plot( time,xo(1,:),'g',sim_ans(2,:),sim_ans(1,:),'b')
 legend("Actual data","simulation")
 

% plot( sim_ans(2,:),sim_ans(1,:),'b')


% below was supposed to be a loop running throgh the entire dataset to see
% if it predicts properly, doesnt because perhaps the net forgot past
% values 
 column_num1=1;
 fin_sim_ans=[];
 for i=1:col_u
     q=[u(1,i);u(2,i)];
     fin_sim_ans(1,column_num1)=sim(net,q);
     column_num1=column_num1+1;
 end 
 
figure
 plot(time,fin_sim_ans);
