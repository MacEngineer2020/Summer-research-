% in this code we fix size of validation set, and change size of trianing
% set to ge the mean error graph 

clc
clear all
close all
format long
out = csvread('Data_1000points_sampled_every5.csv');%importing the data file
u= [out(:,1) out(:,2)]'; % matrix containing u1 and u2
xo = out(:,3)'; %matrix containing x1
time=out(:,4)'; % time stamps

[row_u,col_u]=size(u); %getting size of dtatset
[row_xo,col_xo]=size(xo);
num_of_elements_in_validation=100;
num_of_elements_in_training=300;
num_of_elements=5;
column_num1=1;
for n=1:col_u-num_of_elements_in_training-1

% Setting size of validation set

% creating training set
training=[];
training=[u(1,n:n+num_of_elements_in_training-1);u(2,n:n+num_of_elements_in_training-1);xo(1,n:n+num_of_elements_in_training-1)];
[row_training,col_training]=size(training);
training_time=[time(1,n:n+num_of_elements_in_training)];

row_num=1;
past=[];
for b=col_training:-1:col_training-num_of_elements+1
    past(row_num,1)= training(1,b);
    row_num=row_num+1;
    past(row_num,1)= training(2,b);
    row_num=row_num+1;
    past(row_num,1)= training(3,b);
row_num=row_num+1;
end



% % creating validation set
% validation=[];
% validation=[u(1,col_u-num_of_elements_in_validation+1:col_u);u(2,col_u-num_of_elements_in_validation+1:col_u);xo(1,col_u-num_of_elements_in_validation+1:col_xo)];
% [row_validation,col_validation]=size(validation);
% validation_time=[time(1,col_u-num_of_elements_in_validation+1:col_u)];


weighted_in =[];%matrix to store  u1 and u2 and x1  values from orignal dataset
weighted_out=[];%stores value of x1 of the point that is next, "not fed into net"

% keeping track of column index
sim_ans_validation=[];% stores the simulated value of x1 generated by sim function



% how many elements we want to look back on

    


column_num=1;
row_num=1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
weighted_in =[];%matrix to store  u1 and u2 and x1  values from orignal dataset
weighted_out=[];%stores value of x1 of the point that is next, "not fed into net"

% keeping track of column index
sim_ans_validation=[];% stores the simulated value of x1 generated by sim function
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


for i=1:col_training-num_of_elements % outer loop
    row_num=1;
    for j=i:i+num_of_elements-1% inner loop
        %in this loop we generate our smaller datasets from training set and store them in a matrix
        
        weighted_in(row_num,column_num)=training(1,j);%u1 values
        row_num=row_num+1;
        weighted_in(row_num,column_num)=training(2,j);%u2 values
        row_num=row_num+1;
        weighted_in(row_num,column_num)=training(3,j);% x1 values coressponding to u1 and u2 values 
        %in the above statement
        
        row_num=row_num+1;
    end
    weighted_out(1,column_num)=training(3,i+num_of_elements);
    column_num=column_num+1;
end


% feeding it into the RBF
%net=newrbe(weighted_in,weighted_out);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
net = fitnet(10);
     net = train(net,weighted_in,weighted_out);
     
    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% % now we must create a similar matrix for the validation set
% weighted_in_valid=[];
% row_num=1;
% column_num=1;
% 
% 
% for z=1:col_validation-num_of_elements% outer loop
%     
%     row_num=1;
%     for y=z:z+num_of_elements-1% inner loop
%         %in this loop we generate our smaller datasets from validation set
%         
%         weighted_in_valid(row_num,column_num)=validation(1,y);
%         row_num=row_num+1;
%         weighted_in_valid(row_num,column_num)=validation(2,y);
%         row_num=row_num+1;
%         weighted_in_valid(row_num,column_num)=validation(3,y);
%         row_num=row_num+1;
%     end
%     weighted_out_valid(1,column_num)=xo(1,z+num_of_elements);
%     column_num=column_num+1;
% end


% sim_ans_training(1,:)= sim(net, weighted_in);%running a simulation for the training set
% sim_ans_training(2,:)= training_time(1,num_of_elements+1:end);%storing corressponding timestamps
% 
% 
% 
% figure
% plot( training_time,training(3,:),'g',sim_ans_training(2,:),sim_ans_training(1,:),'b')
% legend("Actual training data","simulation for training ")
% title('Actual data and simulation of training set ')
% 
% 
% %now we run a simulation using the validation set values

sim_ans(1,column_num1) = sim(net,past);% storing the simulated value
sim_ans(2,column_num1)=time(1,col_training+n);% storing the corresponding timestep
column_num1=column_num1+1;

end

% figure 
% plot(mean_error_validation(2,:), mean_error_validation(1,:))
% legend('mean error for different sizes of training');
% title('Mean error for different sizes of training set');
% xlabel(' NUmber of samples in training');
% ylabel('Mean percentage error')

figure
plot(time(1,num_of_elements_in_training:end),xo(1,num_of_elements_in_training:end),'g',sim_ans(2,:), sim_ans(1,:));
legend('actual data of  validation set', ' simulated data for validation set');
title(' actual and simulated for validation set');
