
clc
clear all
close all
format long
out = csvread('learning_data_new.csv');%importing the data file 
 u= [out(:,1) out(:,2)]'; % matrix containing u1 and u2
 xo = out(:,3)'; %matrix containing x1
 time=out(:,4)'; % time stamps 

 [row_u,col_u]=size(u); %getting size of dtatset
 [row_xo,col_xo]=size(xo);
 
column_num=1;%keeps track of column index
 weighted_in =[];%matrix to store 5 u1 and u2 values from orignal dataset
 weighted_out=[];%stores corresponding value of x1
 error=[];
 simulate=[];% stores the value of u1 and u2 to be used in sim function
 column_num1=1% keeping track of column index
 sim_ans=[];% stores the simulated value of x1 generated by sim function
 
 

 num_of_elements=1;% how many elements we want to look back on 
 
 
 for i=1:col_u-num_of_elements % outer loop 
     column_num=1;
     for j=i:i+num_of_elements% inner loop
         %in this loop we generate our smaller datasets and feed them into
         %the rbe 
         
     weighted_in(1,column_num)=u(1,j);
         weighted_in(2,column_num)=u(2,j);
         weighted_out(1,column_num)=xo(1,j);
         column_num=column_num+1;
     end
     % feeding it into the rbe
     net=newrbe(weighted_in,weighted_out);
     
     % now we simulate the value of x1 in the timestep that is "next" and hasnt
     % been input into the net yet
         simulate=[u(1,i+num_of_elements);u(2,i+num_of_elements)];
         sim_ans(1,column_num1) = sim(net,simulate);% storing the simulated value
         sim_ans(2,column_num1)=time(1,i+num_of_elements);% storing the corresponding timestep
         error(1,column_num1)=abs(sim_ans(1,column_num1)-xo(1,i+num_of_elements));
           column_num1 = column_num1+1;
 end

  meanerror= mean(error)*100
     
     % plotting orignal data and simulated data
     figure
 plot( time(1,:),xo(1,:),'g', sim_ans(2,:),sim_ans(1,:),'b')
%   legend("actual data")
%  figure
 legend("Actual data","simulation")
 

% plot( sim_ans(2,:),sim_ans(1,:),'b')

% below was supposed to be a loop running throgh the entire dataset to see
% if it predicts properly, doesnt because perhaps the net forgot past
% values 
figure
plot(sim_ans(2,:), error(1,:))
legend("error graph")
